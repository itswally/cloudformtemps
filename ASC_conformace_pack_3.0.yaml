##################################################################################
#
#   Conformance Pack:
#     Operational Best Practices for AWS Well Architected (WA) Reliability Pillar
#
#   This conformance pack helps verify compliance with the AWS WA Reliability Pillar
#   (https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/welcome.html)
#   requirements.
#
#   This Conformance Pack has been designed for compatibility with the majority of AWS
#   regions and to not require setting of any Parameters. Additional managed rules that
#   require parameters to be set for your environment and/or for your specific region can
#   be found at https://docs.aws.amazon.com/config/latest/developerguide/managed-rules-by-aws-config.html
#
#   See Parameters section for names and descriptions of required parameters.
#
##################################################################################

Parameters:
  DynamodbThroughputLimitCheckParamAccountRCUThresholdPercentage:
    Default: '80'
    Type: String
  DynamodbThroughputLimitCheckParamAccountWCUThresholdPercentage:
    Default: '80'
    Type: String
  LambdaConcurrencyCheckParamConcurrencyLimitHigh:
    Default: '1000'
    Type: String
  LambdaConcurrencyCheckParamConcurrencyLimitLow:
    Default: '500'
    Type: String
  RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade:
    Default: 'TRUE'
    Type: String
Resources:
  AutoscalingGroupElbHealthcheckRequired:
    Properties:
      ConfigRuleName: autoscaling-group-elb-healthcheck-required
      Scope:
        ComplianceResourceTypes:
        - AWS::AutoScaling::AutoScalingGroup
      Source:
        Owner: AWS
        SourceIdentifier: AUTOSCALING_GROUP_ELB_HEALTHCHECK_REQUIRED
    Type: AWS::Config::ConfigRule
  AutoscalingLaunchConfigPublicIpDisabled:
    Properties:
      ConfigRuleName: autoscaling-launch-config-public-ip-disabled
      Scope:
        ComplianceResourceTypes:
        - AWS::AutoScaling::LaunchConfiguration
      Source:
        Owner: AWS
        SourceIdentifier: AUTOSCALING_LAUNCH_CONFIG_PUBLIC_IP_DISABLED
    Type: AWS::Config::ConfigRule
  BeanstalkEnhancedHealthReportingEnabled:
    Properties:
      ConfigRuleName: beanstalk-enhanced-health-reporting-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::ElasticBeanstalk::Environment
      Source:
        Owner: AWS
        SourceIdentifier: BEANSTALK_ENHANCED_HEALTH_REPORTING_ENABLED
    Type: AWS::Config::ConfigRule
  CloudwatchAlarmActionCheck:
    Properties:
      ConfigRuleName: cloudwatch-alarm-action-check
      InputParameters:
        alarmActionRequired: 'TRUE'
        insufficientDataActionRequired: 'TRUE'
        okActionRequired: 'FALSE'
      Scope:
        ComplianceResourceTypes:
        - AWS::CloudWatch::Alarm
      Source:
        Owner: AWS
        SourceIdentifier: CLOUDWATCH_ALARM_ACTION_CHECK
    Type: AWS::Config::ConfigRule
  DbInstanceBackupEnabled:
    Properties:
      ConfigRuleName: db-instance-backup-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: DB_INSTANCE_BACKUP_ENABLED
    Type: AWS::Config::ConfigRule
  DynamodbAutoscalingEnabled:
    Properties:
      ConfigRuleName: dynamodb-autoscaling-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::DynamoDB::Table
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_AUTOSCALING_ENABLED
    Type: AWS::Config::ConfigRule
  DynamodbInBackupPlan:
    Properties:
      ConfigRuleName: dynamodb-in-backup-plan
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  DynamodbPitrEnabled:
    Properties:
      ConfigRuleName: dynamodb-pitr-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::DynamoDB::Table
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_PITR_ENABLED
    Type: AWS::Config::ConfigRule
  DynamodbThroughputLimitCheck:
    Properties:
      ConfigRuleName: dynamodb-throughput-limit-check
      InputParameters:
        accountRCUThresholdPercentage:
          Fn::If:
          - dynamodbThroughputLimitCheckParamAccountRCUThresholdPercentage
          - Ref: DynamodbThroughputLimitCheckParamAccountRCUThresholdPercentage
          - Ref: AWS::NoValue
        accountWCUThresholdPercentage:
          Fn::If:
          - dynamodbThroughputLimitCheckParamAccountWCUThresholdPercentage
          - Ref: DynamodbThroughputLimitCheckParamAccountWCUThresholdPercentage
          - Ref: AWS::NoValue
      Source:
        Owner: AWS
        SourceIdentifier: DYNAMODB_THROUGHPUT_LIMIT_CHECK
    Type: AWS::Config::ConfigRule
  EbsInBackupPlan:
    Properties:
      ConfigRuleName: ebs-in-backup-plan
      Source:
        Owner: AWS
        SourceIdentifier: EBS_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  EbsOptimizedInstance:
    Properties:
      ConfigRuleName: ebs-optimized-instance
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EBS_OPTIMIZED_INSTANCE
    Type: AWS::Config::ConfigRule
  Ec2InstanceDetailedMonitoringEnabled:
    Properties:
      ConfigRuleName: ec2-instance-detailed-monitoring-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_INSTANCE_DETAILED_MONITORING_ENABLED
    Type: AWS::Config::ConfigRule
  Ec2ManagedinstancePatchComplianceStatusCheck:
    Properties:
      ConfigRuleName: ec2-managedinstance-patch-compliance-status-check
      Scope:
        ComplianceResourceTypes:
        - AWS::SSM::PatchCompliance
      Source:
        Owner: AWS
        SourceIdentifier: EC2_MANAGEDINSTANCE_PATCH_COMPLIANCE_STATUS_CHECK
    Type: AWS::Config::ConfigRule
  EfsInBackupPlan:
    Properties:
      ConfigRuleName: efs-in-backup-plan
      Source:
        Owner: AWS
        SourceIdentifier: EFS_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  ElasticacheRedisClusterAutomaticBackupCheck:
    Properties:
      ConfigRuleName: elasticache-redis-cluster-automatic-backup-check
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICACHE_REDIS_CLUSTER_AUTOMATIC_BACKUP_CHECK
    Type: AWS::Config::ConfigRule
  ElasticsearchInVpcOnly:
    Properties:
      ConfigRuleName: elasticsearch-in-vpc-only
      Source:
        Owner: AWS
        SourceIdentifier: ELASTICSEARCH_IN_VPC_ONLY
    Type: AWS::Config::ConfigRule
  ElbCrossZoneLoadBalancingEnabled:
    Properties:
      ConfigRuleName: elb-cross-zone-load-balancing-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::ElasticLoadBalancing::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_CROSS_ZONE_LOAD_BALANCING_ENABLED
    Type: AWS::Config::ConfigRule
  ElbDeletionProtectionEnabled:
    Properties:
      ConfigRuleName: elb-deletion-protection-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::ElasticLoadBalancingV2::LoadBalancer
      Source:
        Owner: AWS
        SourceIdentifier: ELB_DELETION_PROTECTION_ENABLED
    Type: AWS::Config::ConfigRule
  GuarddutyEnabledCentralized:
    Properties:
      ConfigRuleName: guardduty-enabled-centralized
      Source:
        Owner: AWS
        SourceIdentifier: GUARDDUTY_ENABLED_CENTRALIZED
    Type: AWS::Config::ConfigRule
  InstancesInVpc:
    Properties:
      ConfigRuleName: ec2-instances-in-vpc
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: AWS
        SourceIdentifier: INSTANCES_IN_VPC
    Type: AWS::Config::ConfigRule
  LambdaConcurrencyCheck:
    Properties:
      ConfigRuleName: lambda-concurrency-check
      InputParameters:
        ConcurrencyLimitHigh:
          Fn::If:
          - lambdaConcurrencyCheckParamConcurrencyLimitHigh
          - Ref: LambdaConcurrencyCheckParamConcurrencyLimitHigh
          - Ref: AWS::NoValue
        ConcurrencyLimitLow:
          Fn::If:
          - lambdaConcurrencyCheckParamConcurrencyLimitLow
          - Ref: LambdaConcurrencyCheckParamConcurrencyLimitLow
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_CONCURRENCY_CHECK
    Type: AWS::Config::ConfigRule
  LambdaDlqCheck:
    Properties:
      ConfigRuleName: lambda-dlq-check
      Scope:
        ComplianceResourceTypes:
        - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_DLQ_CHECK
    Type: AWS::Config::ConfigRule
  LambdaInsideVpc:
    Properties:
      ConfigRuleName: lambda-inside-vpc
      Scope:
        ComplianceResourceTypes:
        - AWS::Lambda::Function
      Source:
        Owner: AWS
        SourceIdentifier: LAMBDA_INSIDE_VPC
    Type: AWS::Config::ConfigRule
  RdsAutomaticMinorVersionUpgradeEnabled:
    Properties:
      ConfigRuleName: rds-automatic-minor-version-upgrade-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_AUTOMATIC_MINOR_VERSION_UPGRADE_ENABLED
    Type: AWS::Config::ConfigRule
  RdsEnhancedMonitoringEnabled:
    Properties:
      ConfigRuleName: rds-enhanced-monitoring-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_ENHANCED_MONITORING_ENABLED
    Type: AWS::Config::ConfigRule
  RdsInBackupPlan:
    Properties:
      ConfigRuleName: rds-in-backup-plan
      Source:
        Owner: AWS
        SourceIdentifier: RDS_IN_BACKUP_PLAN
    Type: AWS::Config::ConfigRule
  RdsInstanceDeletionProtectionEnabled:
    Properties:
      ConfigRuleName: rds-instance-deletion-protection-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_DELETION_PROTECTION_ENABLED
    Type: AWS::Config::ConfigRule
  RdsMultiAzSupport:
    Properties:
      ConfigRuleName: rds-multi-az-support
      Scope:
        ComplianceResourceTypes:
        - AWS::RDS::DBInstance
      Source:
        Owner: AWS
        SourceIdentifier: RDS_MULTI_AZ_SUPPORT
    Type: AWS::Config::ConfigRule
  RedshiftBackupEnabled:
    Properties:
      ConfigRuleName: redshift-backup-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_BACKUP_ENABLED
    Type: AWS::Config::ConfigRule
  RedshiftClusterMaintenancesettingsCheck:
    Properties:
      ConfigRuleName: redshift-cluster-maintenancesettings-check
      InputParameters:
        allowVersionUpgrade:
          Fn::If:
          - redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade
          - Ref: RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade
          - Ref: AWS::NoValue
      Scope:
        ComplianceResourceTypes:
        - AWS::Redshift::Cluster
      Source:
        Owner: AWS
        SourceIdentifier: REDSHIFT_CLUSTER_MAINTENANCESETTINGS_CHECK
    Type: AWS::Config::ConfigRule
  S3BucketDefaultLockEnabled:
    Properties:
      ConfigRuleName: s3-bucket-default-lock-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_DEFAULT_LOCK_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketReplicationEnabled:
    Properties:
      ConfigRuleName: s3-bucket-replication-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_REPLICATION_ENABLED
    Type: AWS::Config::ConfigRule
  S3BucketVersioningEnabled:
    Properties:
      ConfigRuleName: s3-bucket-versioning-enabled
      Scope:
        ComplianceResourceTypes:
        - AWS::S3::Bucket
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED
    Type: AWS::Config::ConfigRule
  SecurityhubEnabled:
    Properties:
      ConfigRuleName: securityhub-enabled
      Source:
        Owner: AWS
        SourceIdentifier: SECURITYHUB_ENABLED
    Type: AWS::Config::ConfigRule
  VpcVpn2TunnelsUp:
    Properties:
      ConfigRuleName: vpc-vpn-2-tunnels-up
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::VPNConnection
      Source:
        Owner: AWS
        SourceIdentifier: VPC_VPN_2_TUNNELS_UP
    Type: AWS::Config::ConfigRule
Conditions:
  dynamodbThroughputLimitCheckParamAccountRCUThresholdPercentage:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: DynamodbThroughputLimitCheckParamAccountRCUThresholdPercentage
  dynamodbThroughputLimitCheckParamAccountWCUThresholdPercentage:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: DynamodbThroughputLimitCheckParamAccountWCUThresholdPercentage
  lambdaConcurrencyCheckParamConcurrencyLimitHigh:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: LambdaConcurrencyCheckParamConcurrencyLimitHigh
  lambdaConcurrencyCheckParamConcurrencyLimitLow:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: LambdaConcurrencyCheckParamConcurrencyLimitLow
  redshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade:
    Fn::Not:
    - Fn::Equals:
      - ''
      - Ref: RedshiftClusterMaintenancesettingsCheckParamAllowVersionUpgrade
Description: "SO0109 Live Streaming on AWS with MediaStore Solution v1.2.1"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "LIVE STREAM SOURCE"
        Parameters:
          - "InputType"
      - Label:
          default: "URL_PULL CONFIGURATION"
        Parameters:
          - "PullUrl"
          - "PullUser"
          - "PullPass"
      - Label:
          default: "RTP_PUSH / RTMP_PUSH CONFIGURATION"
        Parameters:
          - "InputCIDR"
      - Label:
          default: "INPUT_DEVICE CONFIGURATION"
        Parameters:
          - "InputDeviceId"
      - Label:
          default: "ENCODING OPTIONS"
        Parameters:
          - "EncodingProfile"
          - "ChannelStart"
    ParameterLabels:
      InputType:
        default: "Source Input Type"
      EncodingProfile:
        default: "Encoding Profile"
      InputDeviceId:
        default: "Elemental Link Input Device ID"
      InputCIDR:
        default: "Input Security Group CIDR Block (REQUIRED)"
      PullUrl:
        default: "Source URL (REQUIRED)"
      PullUser:
        default: "Source Username (OPTIONAL)"
      pullPass:
        default: "Source Password (REQUIRED)"
      ChannelStart:
        default: "Start MediaLive Channel"
Parameters:
  InputType:
    Type: "String"
    Default: "URL_PULL"
    AllowedValues:
      - "RTP_PUSH"
      - "RTMP_PUSH"
      - "URL_PULL"
      - "INPUT_DEVICE"
    Description: "Specify the input type for MediaLive (default parameters are for the demo video).  For details on setting up each input type, see https://docs.aws.amazon.com/solutions/latest/live-streaming-on-aws-with-mediastore/appendix-a.html."
  InputDeviceId:
    Type: "String"
    Default: ""
    Description: "Specify the ID for your Elemental Link Input device (please note a Link device can only be attached to one input at a time)"
  InputCIDR:
    Type: "String"
    Default: ""
    Description: "For RTP and RTMP PUSH input types ONLY, specify the CIDR Block for the MediaLive SecurityGroup. Input security group restricts access to the input and prevents unauthorized third parties from pushing content into a channel that is associated with that input."
  PullUrl:
    Type: "String"
    Default: "https://d15an60oaeed9r.cloudfront.net/live_stream_v2/sports_reel_with_markers.m3u8"
    Description: "For URL PULL input type ONLY, specify the primary source URL, this should be a HTTP or HTTPS link to the stream manifest file."
  PullUser:
    Type: "String"
    Default: ""
    Description: "For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the username"
  PullPass:
    Type: "String"
    Default: ""
    Description: "For URL PULL input type ONLY, if basic authentication is enabled on the source stream enter the password"
  EncodingProfile:
    Type: "String"
    Default: "HD-720p"
    AllowedValues:
      - "HD-1080p"
      - "HD-720p"
      - "SD-540p"
    Description: "Select an encoding profile. HD 1080p [1920x1080, 1280x720, 960x540, 768x432, 640x360, 512x288] HD 720p [1280x720, 960x540, 768x432, 640x360, 512x288] SD 540p [960x540, 768x432, 640x360, 512x288]  See the implementation guide for details https://docs.aws.amazon.com/solutions/latest/live-streaming/considerations.html"
  ChannelStart:
    Type: "String"
    Default: "Yes"
    AllowedValues:
      - "Yes"
      - "No"
    Description: "If your source is ready to stream select true, this wil start the MediaLive Channel as part of the deployment. If you select false you will need to manually start the MediaLive Channel when your source is ready."
Mappings:
  AnonymousData:
    SendAnonymousData:
      Data: "Yes"
Resources:
  CloudFrontToMediaStoreCloudFrontOriginAccessIdentityD026F5B3:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment:
          Fn::Join:
            - ""
            -
              - "access-identity-"
              - Ref: "AWS::Region"
              - "-"
              - Ref: "AWS::StackName"
    Metadata:
      aws:cdk:path: "LiveStreaming/CloudFrontToMediaStore/CloudFrontOriginAccessIdentity/Resource"
  CloudFrontToMediaStoreMediaStoreContainer2EAAC53A:
    Type: "AWS::MediaStore::Container"
    Properties:
      ContainerName:
        Ref: "AWS::StackName"
      AccessLoggingEnabled: true
      CorsPolicy:
        - AllowedHeaders:
            - "*"
          AllowedMethods:
            - "GET"
          AllowedOrigins:
            - "*"
          ExposeHeaders:
            - "*"
          MaxAgeSeconds: 3000
      LifecyclePolicy: "{\"rules\":[{\"definition\":{\"path\":[{\"wildcard\":\"stream/*.ts\"}],\"seconds_since_create\":[{\"numeric\":[\">\",300]}]},\"action\":\"EXPIRE\"}]}"
      MetricPolicy:
        ContainerLevelMetrics: "ENABLED"
      Policy:
        Fn::Join:
          - ""
          -
            - "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Sid\":\"MediaStoreDefaultPolicy\",\"Effect\":\"Allow\",\"Principal\":\"*\",\"Action\":[\"mediastore:GetObject\",\"mediastore:DescribeObject\"],\"Resource\":\"arn:"
            - Ref: "AWS::Partition"
            - ":mediastore:"
            - Ref: "AWS::Region"
            - ":"
            - Ref: "AWS::AccountId"
            - ":container/"
            - Ref: "AWS::StackName"
            - "/*\",\"Condition\":{\"StringEquals\":{\"aws:UserAgent\":\""
            - Ref: "CloudFrontToMediaStoreCloudFrontOriginAccessIdentityD026F5B3"
            - "\"},\"Bool\":{\"aws:SecureTransport\":\"true\"}}}]}"
    DeletionPolicy: "Retain"
    Metadata:
      aws:cdk:path: "LiveStreaming/CloudFrontToMediaStore/MediaStoreContainer"
  CloudFrontToMediaStoreCloudfrontLoggingBucketDF6F6E4B:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "LogDeliveryWrite"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: "Enabled"
    UpdateReplacePolicy: "Retain"
    DeletionPolicy: "Retain"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W35"
            reason: "This S3 bucket is used as the access logging bucket for CloudFront Distribution"
  CloudFrontToMediaStoreCloudfrontLoggingBucketPolicy9AB02183:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "CloudFrontToMediaStoreCloudfrontLoggingBucketDF6F6E4B"
      PolicyDocument:
        Statement:
          - Action: "*"
            Condition:
              Bool:
                aws:SecureTransport: "false"
            Effect: "Deny"
            Principal: "*"
            Resource:
              Fn::Join:
                - ""
                -
                  - Fn::GetAtt:
                      - "CloudFrontToMediaStoreCloudfrontLoggingBucketDF6F6E4B"
                      - "Arn"
                  - "/*"
            Sid: "HttpsOnly"
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: "LiveStreaming/CloudFrontToMediaStore/CloudfrontLoggingBucket/Policy/Resource"
  CloudFrontToMediaStoreCloudfrontOriginRequestPolicyE5B13E44:
    Type: "AWS::CloudFront::OriginRequestPolicy"
    Properties:
      OriginRequestPolicyConfig:
        Comment: "Policy for Constructs CloudFrontDistributionForMediaStore"
        CookiesConfig:
          CookieBehavior: "none"
        HeadersConfig:
          HeaderBehavior: "whitelist"
          Headers:
            - "Access-Control-Allow-Origin"
            - "Access-Control-Request-Method"
            - "Access-Control-Request-Header"
            - "Origin"
        Name:
          Fn::Join:
            - ""
            -
              - Ref: "AWS::StackName"
              - "-"
              - Ref: "AWS::Region"
              - "-CloudFrontDistributionForMediaStore"
        QueryStringsConfig:
          QueryStringBehavior: "all"
    Metadata:
      aws:cdk:path: "LiveStreaming/CloudFrontToMediaStore/CloudfrontOriginRequestPolicy/Resource"
  CloudFrontToMediaStoreCloudFrontDistribution36D55136:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        DefaultCacheBehavior:
          AllowedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          CachePolicyId: "658327ea-f89d-4fab-a63d-7e88639e58f6"
          CachedMethods:
            - "GET"
            - "HEAD"
            - "OPTIONS"
          Compress: true
          OriginRequestPolicyId:
            Ref: "CloudFrontToMediaStoreCloudfrontOriginRequestPolicyE5B13E44"
          TargetOriginId: "LiveStreamingCloudFrontToMediaStoreCloudFrontDistributionOrigin1A3A57054"
          ViewerProtocolPolicy: "redirect-to-https"
        Enabled: true
        HttpVersion: "http2"
        IPV6Enabled: true
        Logging:
          Bucket:
            Fn::GetAtt:
              - "CloudFrontToMediaStoreCloudfrontLoggingBucketDF6F6E4B"
              - "RegionalDomainName"
        Origins:
          - CustomOriginConfig:
              OriginProtocolPolicy: "https-only"
              OriginSSLProtocols:
                - "TLSv1.2"
            DomainName:
              Fn::Select:
                - 0
                - Fn::Split:
                    - "/"
                    - Fn::Select:
                        - 1
                        - Fn::Split:
                            - "://"
                            - Fn::GetAtt:
                                - "CloudFrontToMediaStoreMediaStoreContainer2EAAC53A"
                                - "Endpoint"
            Id: "LiveStreamingCloudFrontToMediaStoreCloudFrontDistributionOrigin1A3A57054"
            OriginCustomHeaders:
              - HeaderName: "User-Agent"
                HeaderValue:
                  Ref: "CloudFrontToMediaStoreCloudFrontOriginAccessIdentityD026F5B3"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W70"
            reason: "Since the distribution uses the CloudFront domain name, CloudFront automatically sets the security policy to TLSv1 regardless of the value of MinimumProtocolVersion"
  MediaLiveRole1149D189:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "medialive.amazonaws.com"
        Version: "2012-10-17"
    Metadata:
      aws:cdk:path: "LiveStreaming/MediaLiveRole/Resource"
  mediaLivePolicyA0AA0DF7:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "mediastore:DeleteObject"
              - "mediastore:DescribeObject"
              - "mediastore:GetObject"
              - "mediastore:ListItems"
              - "mediastore:PutObject"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:"
                  - Ref: "AWS::Partition"
                  - ":mediastore:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - ":*"
          - Action:
              - "ssm:DescribeParameters"
              - "ssm:GetParameter"
              - "ssm:GetParameters"
              - "ssm:PutParameter"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:"
                  - Ref: "AWS::Partition"
                  - ":ssm:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - ":parameter/*"
        Version: "2012-10-17"
      PolicyName: "mediaLivePolicyA0AA0DF7"
      Roles:
        - Ref: "MediaLiveRole1149D189"
    Metadata:
      aws:cdk:path: "LiveStreaming/mediaLivePolicy/Resource"
  CustomResourceServiceRoleE774390D:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
        Version: "2012-10-17"
      ManagedPolicyArns:
        - Fn::Join:
            - ""
            -
              - "arn:"
              - Ref: "AWS::Partition"
              - ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
    Metadata:
      aws:cdk:path: "LiveStreaming/CustomResource/ServiceRole/Resource"
  CustomResourceServiceRoleDefaultPolicy62213138:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - "medialive:DescribeInputSecurityGroup"
              - "medialive:createInputSecurityGroup"
              - "medialive:describeInput"
              - "medialive:createInput"
              - "medialive:deleteInput"
              - "medialive:stopChannel"
              - "medialive:createChannel"
              - "medialive:deleteChannel"
              - "medialive:deleteInputSecurityGroup"
              - "medialive:describeChannel"
              - "medialive:startChannel"
              - "medialive:tagResource"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:"
                  - Ref: "AWS::Partition"
                  - ":medialive:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - ":*"
          - Action: "ssm:PutParameter"
            Effect: "Allow"
            Resource:
              Fn::Join:
                - ""
                -
                  - "arn:"
                  - Ref: "AWS::Partition"
                  - ":ssm:"
                  - Ref: "AWS::Region"
                  - ":"
                  - Ref: "AWS::AccountId"
                  - ":parameter/*"
          - Action: "iam:PassRole"
            Effect: "Allow"
            Resource:
              Fn::GetAtt:
                - "MediaLiveRole1149D189"
                - "Arn"
        Version: "2012-10-17"
      PolicyName: "CustomResourceServiceRoleDefaultPolicy62213138"
      Roles:
        - Ref: "CustomResourceServiceRoleE774390D"
    Metadata:
      aws:cdk:path: "LiveStreaming/CustomResource/ServiceRole/DefaultPolicy/Resource"
  CustomResource8CDCD7A7:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: "solutions-${AWS::Region}"
        S3Key: "live-streaming-on-aws-with-mediastore/v1.2.1/asset3421bcdd1cd4d21cd28cf599699ae0f2fb3b1878c2434614a1994fb970722e73.zip"
      Role:
        Fn::GetAtt:
          - "CustomResourceServiceRoleE774390D"
          - "Arn"
      Description: "CFN Custom resource to copy assets to S3 and get the MediaConvert endpoint"
      Handler: "index.handler"
      Runtime: "nodejs12.x"
      Timeout: 30
    DependsOn:
      - "CustomResourceServiceRoleDefaultPolicy62213138"
      - "CustomResourceServiceRoleE774390D"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: "W58"
            reason: "Invalid warning: function has access to cloudwatch"
  MediaLiveInput:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CustomResource8CDCD7A7"
          - "Arn"
      StreamName:
        Ref: "AWS::StackName"
      Type:
        Ref: "InputType"
      InputDeviceId:
        Ref: "InputDeviceId"
      Cidr:
        Ref: "InputCIDR"
      PullUrl:
        Ref: "PullUrl"
      PullUser:
        Ref: "PullUser"
      PullPass:
        Ref: "PullPass"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Metadata:
      aws:cdk:path: "LiveStreaming/MediaLiveInput/Default"
  MediaLiveChannel:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CustomResource8CDCD7A7"
          - "Arn"
      StreamName:
        Ref: "AWS::StackName"
      EncodingProfile:
        Ref: "EncodingProfile"
      Codec: "AVC"
      Role:
        Fn::GetAtt:
          - "MediaLiveRole1149D189"
          - "Arn"
      InputId:
        Fn::GetAtt:
          - "MediaLiveInput"
          - "Id"
      Type:
        Ref: "InputType"
      MediaStoreEndpoint:
        Fn::GetAtt:
          - "CloudFrontToMediaStoreMediaStoreContainer2EAAC53A"
          - "Endpoint"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Metadata:
      aws:cdk:path: "LiveStreaming/MediaLiveChannel/Default"
  MediaLiveChannelStart:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CustomResource8CDCD7A7"
          - "Arn"
      ChannelId:
        Fn::GetAtt:
          - "MediaLiveChannel"
          - "ChannelId"
      ChannelStart:
        Ref: "ChannelStart"
    DependsOn:
      - "CloudFrontToMediaStoreCloudFrontDistribution36D55136"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Metadata:
      aws:cdk:path: "LiveStreaming/MediaLiveChannelStart/Default"
  UUID:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CustomResource8CDCD7A7"
          - "Arn"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Metadata:
      aws:cdk:path: "LiveStreaming/UUID/Default"
  AnonymousMetric:
    Type: "AWS::CloudFormation::CustomResource"
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - "CustomResource8CDCD7A7"
          - "Arn"
      SolutionId: "SO0109"
      UUID:
        Fn::GetAtt:
          - "UUID"
          - "UUID"
      Version: "v1.2.1"
      Type:
        Ref: "InputType"
      Cidr:
        Ref: "InputCIDR"
      EncodingProfile:
        Ref: "EncodingProfile"
      ChannelStart:
        Ref: "ChannelStart"
      SendAnonymousMetric:
        Fn::FindInMap:
          - "AnonymousData"
          - "SendAnonymousData"
          - "Data"
    UpdateReplacePolicy: "Delete"
    DeletionPolicy: "Delete"
    Metadata:
      aws:cdk:path: "LiveStreaming/AnonymousMetric/Default"
  Dashboard9E4231ED:
    Type: "AWS::CloudWatch::Dashboard"
    Properties:
      DashboardBody:
        Fn::Join:
          - ""
          -
            - "{\"widgets\":[{\"type\":\"text\",\"width\":24,\"height\":2,\"x\":0,\"y\":0,\"properties\":{\"markdown\":\"\\nThis dashboard monitors the CloudWatch Logs for the MediaStore container and shows data points for                     both ingress and egress operations while the live stream is running. This dashboard monitors the CloudWatch                     Logs for the MediaStore container and shows data points for both ingress and egress operations while the live stream is running.                     An IAM Role is required to allow MediaStore to write to CloudWatch Logs. If you do not see any data points on this dashboard, please follow                     [these instructions to create the Role](https://docs.aws.amazon.com/mediastore/latest/ug/monitoring-cloudwatch-permissions.html).\\n\"}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":0,\"y\":2,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Ingress Transaction Per Minute\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | fields @message\\n| filter (Path like \\\"/stream/index\\\") and (Operation=\\\"PutObject\\\")\\n| stats count(*) as TPM by bin(1m)\",\"stacked\":false}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":12,\"y\":2,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Egress Transaction Per Minute\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | fields @message\\n| filter (Path like \\\"/stream/index\\\") and (Operation=\\\"GetObject\\\")\\n| stats count(*) as TPM by bin(1m)\",\"stacked\":false}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":0,\"y\":8,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Ingress PutObject Latencies (Successful Requests)\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter HTTPStatus like /2\\\\d{2}/ and Operation=\\\"PutObject\\\" | stats avg(TurnAroundTime), avg(TotalTime), percentile(TurnAroundTime, 99), percentile(TotalTime, 99) by bin(1m)\",\"stacked\":false}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":12,\"y\":8,\"properties\":{\"view\":\"timeSeries\",\"title\":\"Egress GetObject Latencies (Successful Requests)\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter HTTPStatus like /2\\\\d{2}/ and Operation=\\\"GetObject\\\" | stats avg(TurnAroundTime), avg(TotalTime), percentile(TurnAroundTime, 99), percentile(TotalTime, 99) by bin(1m)\",\"stacked\":false}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":0,\"y\":14,\"properties\":{\"view\":\"table\",\"title\":\"Ingress 2xx Status Count by Operation\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\") | filter HTTPStatus like /2\\\\d{2}/ \\n| filter Operation = \\\"PutObject\\\" or Operation=\\\"DeleteObject\\\"\\n| stats count() as '2xx Count' by Operation | sort '2xx Count' desc\"}},{\"type\":\"log\",\"width\":12,\"height\":6,\"x\":12,\"y\":14,\"properties\":{\"view\":\"table\",\"title\":\"Egress 2xx Status Count by Operation\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\") | filter HTTPStatus like /2\\\\d{2}/ \\n| filter Operation = \\\"GetObject\\\" \\n| stats count() as '2xx Count' by Operation | sort '2xx Count' desc\"}},{\"type\":\"log\",\"width\":6,\"height\":6,\"x\":0,\"y\":20,\"properties\":{\"view\":\"table\",\"title\":\"Ingress 4xx Status Count\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\")\\n| filter HTTPStatus like /4\\\\d{2}/ \\n| filter Operation = \\\"PutObject\\\"\\n| stats count() as '4xx Count' by Operation\"}},{\"type\":\"log\",\"width\":6,\"height\":6,\"x\":6,\"y\":20,\"properties\":{\"view\":\"table\",\"title\":\"Ingress 5xx Status Count\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\")\\n| filter HTTPStatus like /5\\\\d{2}/ \\n| filter Operation = \\\"PutObject\\\"\\n| stats count() as '5xx Count' by Operation\"}},{\"type\":\"log\",\"width\":6,\"height\":6,\"x\":12,\"y\":20,\"properties\":{\"view\":\"table\",\"title\":\"Egress 4xx Status Count\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\")\\n| filter HTTPStatus like /4\\\\d{2}/ \\n| filter Operation = \\\"GetObject\\\"\\n| stats count() as '4xx Count' by Operation\"}},{\"type\":\"log\",\"width\":6,\"height\":6,\"x\":18,\"y\":20,\"properties\":{\"view\":\"table\",\"title\":\"Egress 5xx Status Count\",\"region\":\""
            - Ref: "AWS::Region"
            - "\",\"query\":\"SOURCE '/aws/mediastore/"
            - Ref: "AWS::StackName"
            - "' | filter (Path like \\\"/stream/index\\\")\\n| filter HTTPStatus like /5\\\\d{2}/ \\n| filter Operation = \\\"GetObject\\\"\\n| stats count() as '5xx Count' by Operation\"}}]}"
      DashboardName:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-"
            - Ref: "AWS::Region"
    Metadata:
      aws:cdk:path: "LiveStreaming/Dashboard/Resource"
  CDKMetadata:
    Type: "AWS::CDK::Metadata"
    Properties:
      Analytics: "v2:deflate64:H4sIAAAAAAAAA21SW27CMBA8S/8d09ALlIeQ+oFAoRdY7AUMiU29dlFl+e71oylU6tfOjnayO+O0vG2fefv0CjdqgpCXSRDGIg87B+LCFge9BQsDOrS5WcP1qvSRLYwmZ71wbEaELg0fC+3JmaFDMt4KzIJHvPHu6l1GSS6VU0ZHVvf2xsuDNdrxsLEqfWsmBBK9SdROua+iyTOrPPPvRCU7/PBIbmt6JYrqP3qp0u1q7/MBeeaxj2xAqSDZSCHUSx0ondzTCw9zLy5YHPygWu7r/vS1mQNhZAoGHjrT11ByvYsqiqyHYS+Bh5XXYrxtxDHtbyBnTbxEzkpmN3DixMMS6LQ3YGWxMzYxJpXpiy9qxPhkNMmZ3yNvHh3/hvxu1pneZToybSTyM00+2ymf5v/lTEo11qfsB+Rdrd+i+HL/TAIAAA=="
    Metadata:
      aws:cdk:path: "LiveStreaming/CDKMetadata/Default"
    Condition: "CDKMetadataAvailable"
Outputs:
  LiveStreamUrl:
    Description: "CloudFront Live Stream URL"
    Value:
      Fn::Join:
        - ""
        -
          - "https://"
          - Fn::GetAtt:
              - "CloudFrontToMediaStoreCloudFrontDistribution36D55136"
              - "DomainName"
          - "/stream/index.m3u8"
    Export:
      Name:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-LiveStreamUrl"
  MediaLiveConsole:
    Description: "MediaLive Channel"
    Value:
      Fn::Join:
        - ""
        -
          - "https://"
          - Ref: "AWS::Region"
          - ".console.aws.amazon.com/medialive/home?region="
          - Ref: "AWS::Region"
          - "#!/channels"
    Export:
      Name:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-MediaLiveConsole"
  MediaStoreConsole:
    Description: "MediaStore Container"
    Value:
      Fn::Join:
        - ""
        -
          - "https://"
          - Ref: "AWS::Region"
          - ".console.aws.amazon.com/mediastore/home/containers/"
    Export:
      Name:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-MediaStoreConsole"
  CloudWatchDashboard:
    Description: "CloudWatch Dashboard for MediaStore Ingress and Egress"
    Value:
      Fn::Join:
        - ""
        -
          - "https://"
          - Ref: "AWS::Region"
          - ".console.aws.amazon.com/cloudwatch/home?region="
          - Ref: "AWS::Region"
          - "#dashboards:name="
          - Ref: "AWS::StackName"
          - "-MediaStore-Live-Streaming"
    Export:
      Name:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-CloudWatchDashboard"
  MediaLivePushEndpoint:
    Description: "The MediaLive Input ingress endpoint for push input types"
    Value:
      Fn::GetAtt:
        - "MediaLiveInput"
        - "EndPoint"
    Export:
      Name:
        Fn::Join:
          - ""
          -
            - Ref: "AWS::StackName"
            - "-MediaLiveEndpoint"
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
      - Fn::Or:
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "af-south-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-east-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-northeast-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-northeast-2"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-south-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-southeast-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ap-southeast-2"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "ca-central-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "cn-north-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "cn-northwest-1"
      - Fn::Or:
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-central-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-north-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-south-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-west-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-west-2"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "eu-west-3"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "me-south-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "sa-east-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "us-east-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "us-east-2"
      - Fn::Or:
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "us-west-1"
          - Fn::Equals:
              - Ref: "AWS::Region"
              - "us-west-2"
