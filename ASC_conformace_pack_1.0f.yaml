###################################################################################
#
#   Conformance Pack:
#     AWS Control Tower Detective Guardrails Conformance Pack
#
#    The AWS Control Tower detective guardrails conformance pack contains all of the
#    AWS Config Rules based guardrails from AWS Control Tower. Use this conformance
#    pack to apply AWS Control Tower detective guardrails to your existing accounts
#    prior to enrolling them in AWS Control Tower or to manage resources in your
#    accounts in regions not currently supported by AWS Control Tower. 
###################################################################################

Resources:
  CheckForEbsOptimizedInstance:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForEbsOptimizedInstance
      Description: Disallow launch of EC2 instance types that are not EBS-optimized - Checks whether EBS optimization is enabled for your EC2 instances that can be EBS-optimized
      Source:
        Owner: AWS
        SourceIdentifier: EBS_OPTIMIZED_INSTANCE
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Instance
  CheckForEc2VolumesInUse:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForEc2VolumesInUs
      Description: Disallow EBS volumes that are unattached to an EC2 instance - Checks whether EBS volumes are attached to EC2 instances
      InputParameters:
        deleteOnTermination: true
      Source:
        Owner: AWS
        SourceIdentifier: EC2_VOLUME_INUSE_CHECK
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
  CheckForEncryptedVolumes:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForEncryptedVolumes
      Description: Enable encryption for EBS volumes attached to EC2 instances - Checks whether EBS volumes that are in an attached state are encrypted.
      Source:
        Owner: AWS
        SourceIdentifier: ENCRYPTED_VOLUMES
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
  CheckForIAMUserMFA:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForIAMUserMFA
      Description: Disallow access to IAM users without MFA - Checks whether the AWS Identity and Access Management users have multi-factor authentication (MFA) enabled. The rule is COMPLIANT if MFA is enabled.
      Source:
        Owner: AWS
        SourceIdentifier: IAM_USER_MFA_ENABLED
      MaximumExecutionFrequency: One_Hour
  CheckForIAMUserConsoleMFA:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForIAMUserConsoleMFA
      Description: Disallow console access to IAM users without MFA - Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is COMPLIANT if MFA is enabled.
      Source:
        Owner: AWS
        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS
      MaximumExecutionFrequency: One_Hour
  CheckForRdsPublicAccess:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForRdsPublicAccess
      Description: Disallow public access to RDS database instances - Checks whether the Amazon Relational Database Service (RDS) instances are not publicly accessible. The rule is non-compliant if the publiclyAccessible field is true in the instance configuration item.
      Source:
        Owner: AWS
        SourceIdentifier: RDS_INSTANCE_PUBLIC_ACCESS_CHECK
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
  CheckForPublicRdsSnapshots:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForPublicRdsSnapshots
      Description: Disallow public access to RDS database snapshots - Checks if Amazon Relational Database Service (Amazon RDS) snapshots are public. The rule is non-compliant if any existing and new Amazon RDS snapshots are public.
      Source:
        Owner: AWS
        SourceIdentifier: RDS_SNAPSHOTS_PUBLIC_PROHIBITED
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBSnapshot
  CheckForRdsStorageEncryption:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForRdsStorageEncryption
      Description: Disallow RDS database instances that are not storage encrypted - Checks whether storage encryption is enabled for your RDS DB instances.
      Source:
        Owner: AWS
        SourceIdentifier: RDS_STORAGE_ENCRYPTED
      Scope:
        ComplianceResourceTypes:
          - AWS::RDS::DBInstance
  CheckForRestrictedCommonPortsPolicy:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForRestrictedCommonPortsPolicy
      Description: Disallow internet connection through RDP - Checks whether security groups that are in use disallow unrestricted incoming TCP traffic to the specified ports.
      InputParameters:
        blockedPort1: 20
        blockedPort2: 21
        blockedPort3: 3389
        blockedPort4: 3306
        blockedPort5: 4333
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC
  CheckForRestrictedSshPolicy:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForRestrictedSshPolicy
      Description: Disallow internet connection through SSH - Checks whether security groups that are in use disallow unrestricted incoming SSH traffic.
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
  CheckForRootMfa:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForRootMfa
      Description: Enable MFA for the root user - Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in.
      Source:
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED
      MaximumExecutionFrequency: One_Hour
  CheckForS3PublicRead:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForS3PublicRead
      Description: Disallow public read access to S3 buckets - Checks that your S3 buckets do not allow public read access. If an S3 bucket policy or bucket ACL allows public read access, the bucket is noncompliant.
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_READ_PROHIBITED
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
  CheckForS3PublicWrite:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForS3PublicWrite
      Description: Disallow public write access to S3 buckets - Checks that your S3 buckets do not allow public write access. If an S3 bucket policy or bucket ACL allows public write access, the bucket is noncompliant.
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_PUBLIC_WRITE_PROHIBITED
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
  CheckForS3VersioningEnabled:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: CheckForS3VersioningEnabled
      Description: Disallow S3 buckets that are not versioning enabled - Checks whether versioning is enabled for your S3 buckets.
      Source:
        Owner: AWS
        SourceIdentifier: S3_BUCKET_VERSIONING_ENABLED
      Scope:
        ComplianceResourceTypes:
          - AWS::S3::Bucket
AWSTemplateFormatVersion: 2010-09-09
Description: >-
    Version 1.0
    Deploy Config Rule and SSM document to remediate API Gateway Custom Domain
    TLS 1.2. The S3 key is a reference to a zipped python
    file lambda function. The zip filename must be "ASC_APIGW_Custom_Domain_Force_TLS_1_2.zip",
    since this is the name used for the lambda handler.
    The Lambda functions runs under a role created by this
    cloudformation. The SSM document runs a python script, included in this template.
    This assumes that AWS Config has previously been set up and configured and
    we are only adding a rule and remediation. Can only create one stack since
    the names are not stack based or dynamic.

Parameters:
    Frequency:
        Type: String
        Default: TwentyFour_Hours
        AllowedValues:
            - One_Hour
            - Six_Hours
            - Three_Hours
            - Twelve_Hours
            - TwentyFour_Hours
        Description: The periodic frequency to run the Config Rule. Valid values are One_Hour | Six_Hours | Three_Hours | Twelve_Hours | TwentyFour_Hours. No effect when providing an existing Config Rule.

    S3BucketName:
        Type: String
        MaxLength: 63
        Description: The S3 Bucket name where the Lambda function is located. No effect when providing an existing Config Rule.

    S3Key:
        Type: String
        MaxLength: 1024
        Description: The S3 Key (filepath and filename together) where the Lambda function is located. No effect when providing an existing Config Rule.

    ExistingConfigRule:
        Type: String
        Default: ""
        Description: The existing config rule to add remediation to. Leave empty to create a config rule. Must provide S3BucketName and S3Key if this is left blank.

Conditions:
    CreateConfigRule: !Equals [!Ref ExistingConfigRule, "" ]

Resources:
    ASCAPIGWCustomDomainForceTLS12LambdaRole:
        Condition: CreateConfigRule
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - lambda.amazonaws.com
                      Action:
                        - 'sts:AssumeRole'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
                - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
                - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole

    ASCAPIGWCustomDomainForceTLS12SSMRole:
        Type: AWS::IAM::Role
        Properties:
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    - Effect: Allow
                      Principal:
                        Service:
                            - ssm.amazonaws.com
                      Action:
                        - 'sts:AssumeRole'
            ManagedPolicyArns:
                - arn:aws:iam::aws:policy/service-role/AmazonSSMAutomationRole
                - arn:aws:iam::aws:policy/AmazonAPIGatewayAdministrator
    
    ASCAPIGWCustomDomainForceTLS12Lambda:
        Condition: CreateConfigRule
        Type: AWS::Lambda::Function
        Properties:
            Code:
                S3Bucket: !Ref S3BucketName
                S3Key: !Ref S3Key
            Description: Function to evaluate if Aurora PostgreSQL is encrypted in transit.
            FunctionName: !Join ["-", [ !Ref 'AWS::StackName', 'Lambda' ]]
            PackageType: Zip
            Role: !GetAtt ASCAPIGWCustomDomainForceTLS12LambdaRole.Arn
            Runtime: python3.8
            Handler: ASC_APIGW_Custom_Domain_Force_TLS_1_2.lambda_handler
            Timeout: 30
        DependsOn: ASCAPIGWCustomDomainForceTLS12LambdaRole

    ASCConfigPermissionToCallLambda:
        Condition: CreateConfigRule
        Type: AWS::Lambda::Permission
        Properties: 
            FunctionName: !GetAtt ASCAPIGWCustomDomainForceTLS12Lambda.Arn
            Action: "lambda:InvokeFunction"
            Principal: "config.amazonaws.com"
        DependsOn: ASCAPIGWCustomDomainForceTLS12Lambda

    ASCAPIGWCustomDomainForceTLS12Rule:
        Condition: CreateConfigRule
        Type: AWS::Config::ConfigRule
        Properties:
            ConfigRuleName: !Join ["-", [ 'ASCAPIGWCustomDomainForceTLS12Rule', !Ref 'AWS::StackName' ]]
            Description:
                Checks an API Gateway Custom domain for TLS 1.2.
            MaximumExecutionFrequency: !Ref Frequency
            Source:
                Owner: CUSTOM_LAMBDA
                SourceDetails:
                    -
                        EventSource: "aws.config"
                        MessageType: "ScheduledNotification"
                SourceIdentifier: !GetAtt ASCAPIGWCustomDomainForceTLS12Lambda.Arn
        DependsOn: ASCConfigPermissionToCallLambda

    ASCAPIGWCustomDomainForceTLS12Automation:
        Type: AWS::SSM::Document
        Properties:
            DocumentType: Automation
            Name: !Join ["-", [ 'ASCAPIGWCustomDomainForceTLS12Automation', !Ref 'AWS::StackName' ]]
            TargetType: /AWS::ApiGatewayV2::DomainName
            Content:
                description: |-
                schemaVersion: '0.3'
                assumeRole: !GetAtt ASCAPIGWCustomDomainForceTLS12SSMRole.Arn
                parameters:
                  domainName:
                    type: String
                    description: the input api gateway custom domain name
                  AutomationAssumeRole:
                    type: String
                    description: (Required) The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that allows Systems Manager Automation to perform the actions on your behalf.
                mainSteps:
                  - name: runScript
                    action: 'aws:executeScript'
                    inputs:
                        Runtime: python3.6
                        Handler: script_handler
                        Script: |+
                            import boto3
                            import botocore.exceptions

                            def script_handler(event, context):
                                print(event["domainName"])
                                client = boto3.client('apigateway')

                                domain = client.get_domain_name(
                                          domainName=event['domainName']
                                        )

                                tls = domain['securityPolicy']
                                if tls == 'TLS_1_2':
                                    return
                                else:
                                    # update TLS to v 1.2
                                    response = client.update_domain_name(
                                        domainName=event["domainName"],
                                        patchOperations=[ {
                                            'op': 'replace',
                                            'path': '/securityPolicy',
                                            'value': 'TLS_1_2'
                                        } ]
                                    )
                                print(response)

                        InputPayload:
                            domainName: '{{ domainName }}'
        DependsOn: ASCAPIGWCustomDomainForceTLS12SSMRole
            

    ASCAPIGWCustomDomainForceTLS12Remediation:
        Type: AWS::Config::RemediationConfiguration
        Properties:
            Automatic: True
            RetryAttemptSeconds: 60
            MaximumAutomaticAttempts: 5
            ConfigRuleName: !If [ CreateConfigRule, !Join ["-", [ 'ASCAPIGWCustomDomainForceTLS12Rule', !Ref 'AWS::StackName' ]], !Ref ExistingConfigRule ]
            Parameters:
                domainName:
                    ResourceValue:
                        Value: RESOURCE_ID
                AutomationAssumeRole:
                    StaticValue:
                        Values:
                          - !GetAtt ASCAPIGWCustomDomainForceTLS12SSMRole.Arn
            TargetId: !Ref ASCAPIGWCustomDomainForceTLS12Automation
            TargetType: SSM_DOCUMENT
            ResourceType: AWS::ApiGatewayV2::DomainName
        DependsOn: ASCAPIGWCustomDomainForceTLS12SSMRole
